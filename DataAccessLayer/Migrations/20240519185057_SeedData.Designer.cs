// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20240519185057_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.Models.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Categories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5704f4c0-9572-498c-924f-6606cc4177a2"),
                            Deadline = new DateTime(2024, 5, 26, 18, 50, 56, 964, DateTimeKind.Utc).AddTicks(1769),
                            Description = "Description for Task 1",
                            OwnerId = new Guid("8e1be324-bee0-446f-902d-498762b9483f"),
                            Priority = "High",
                            Title = "Task 1"
                        },
                        new
                        {
                            Id = new Guid("9eb35740-cba3-45d6-a8e8-e401a9955831"),
                            Deadline = new DateTime(2024, 6, 2, 18, 50, 56, 964, DateTimeKind.Utc).AddTicks(1777),
                            Description = "Description for Task 2",
                            OwnerId = new Guid("41580610-42fb-48de-8825-08b311021f4b"),
                            Priority = "Medium",
                            Title = "Task 2"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e1be324-bee0-446f-902d-498762b9483f"),
                            Email = "alice@example.com",
                            Name = "Alice",
                            Password = new byte[0],
                            PasswordSalt = new byte[0]
                        },
                        new
                        {
                            Id = new Guid("41580610-42fb-48de-8825-08b311021f4b"),
                            Email = "bob@example.com",
                            Name = "Bob",
                            Password = new byte[0],
                            PasswordSalt = new byte[0]
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.UserTask", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("UserTasks");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8e1be324-bee0-446f-902d-498762b9483f"),
                            TaskId = new Guid("5704f4c0-9572-498c-924f-6606cc4177a2")
                        },
                        new
                        {
                            UserId = new Guid("41580610-42fb-48de-8825-08b311021f4b"),
                            TaskId = new Guid("5704f4c0-9572-498c-924f-6606cc4177a2")
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.Task", b =>
                {
                    b.HasOne("DataAccessLayer.Models.User", "Owner")
                        .WithMany("OwnedTasks")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DataAccessLayer.Models.UserTask", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Task", "Task")
                        .WithMany("Assignees")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.User", "User")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Task", b =>
                {
                    b.Navigation("Assignees");
                });

            modelBuilder.Entity("DataAccessLayer.Models.User", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("OwnedTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
